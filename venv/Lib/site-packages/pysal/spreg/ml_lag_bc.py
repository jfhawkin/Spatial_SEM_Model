"""
ML Estimation of Spatial Lag Model with Box Cox transformations
"""

__author__ = "Jason Hawkins"

import numpy as np
import numpy.linalg as la
from scipy import sparse as sp
from scipy.sparse.linalg import splu as SuperLU
import pysal as ps
from .utils import RegressionPropsY, RegressionPropsVM, inverse_prod
from .sputils import spdot, spfill_diagonal, spinv, spbroadcast
from . import diagnostics as DIAG
from . import user_output as USER
from . import summary_output as SUMMARY
from .w_utils import symmetrize
try:
    from scipy.optimize import minimize
    minimize_available = True
except ImportError:
    minimize_available = False

__all__ = ["ML_Lag_BC"]


class BaseML_Lag_BC(RegressionPropsY, RegressionPropsVM):

    """
    ML estimation of the spatial lag model with Box-Cox transformations(note no consistency
    checks, diagnostics or constants added); Anselin (1988) [Anselin1988]_

    Parameters
    ----------
    y            : array
                   nx1 array for dependent variable
    x            : array
                   Two dimensional array with n rows and one column for each
                   independent (exogenous) variable, excluding the constant
    w            : pysal W object
                   Spatial weights object
    method       : string
                   if 'full', brute force calculation (full matrix expressions)
                   if 'ord', Ord eigenvalue method
                   if 'LU', LU sparse matrix decomposition
    epsilon      : float
                   tolerance criterion in mimimize_scalar function and inverse_product

    Attributes
    ----------
    betas        : array
                   (k+1)x1 array of estimated coefficients (rho first)
    rho          : float
                   estimate of spatial autoregressive coefficient
    lam          : float
                   estimate of Box-Cox transformation coefficient on dependent variable
    u            : array
                   nx1 array of residuals
    predy        : array
                   nx1 array of predicted y values
    n            : integer
                   Number of observations
    k            : integer
                   Number of variables for which coefficients are estimated
                   (including the constant, excluding the rho)
    y            : array
                   nx1 array for dependent variable
    x            : array
                   Two dimensional array with n rows and one column for each
                   independent (exogenous) variable, including the constant
    method       : string
                   log Jacobian method
                   if 'full': brute force (full matrix computations)
                   if 'ord' : Ord eigenvalue method
    epsilon      : float
                   tolerance criterion used in minimize_scalar function and inverse_product
    mean_y       : float
                   Mean of dependent variable
    std_y        : float
                   Standard deviation of dependent variable
    vm           : array
                   Variance covariance matrix (k+1 x k+1)
    vm1          : array
                   Variance covariance matrix (k+2 x k+2) includes sigma2
    sig2         : float
                   Sigma squared used in computations
    logll        : float
                   maximized log-likelihood (including constant terms)
    predy_e      : array
                   predicted values from reduced form
    e_pred       : array
                   prediction errors using reduced form predicted values

    """

    def __init__(self, y, x, w, method='full', epsilon=0.0000001, LM=False):
        # set up main regression variables and spatial filters
        self.y = y
        self.x = x
        self.n, self.k = self.x.shape
        self.method = method
        self.epsilon = epsilon
        xtx = spdot(self.x.T, self.x)
        xtxi = la.inv(xtx)
        methodML = method.upper()
        # Set the initial parameter values for estimation
        x0 = [0.0, 0.5]
        # call minimizer using concentrated log-likelihood to get rho/lambda
        if methodML in ['FULL', 'LU', 'ORD']:
            if methodML == 'FULL':
                W = w.full()[0]    # moved here
                res = minimize(lag_c_loglik, x0, bounds=((-1.0, 1.0),(None, None)),
                                      args=(
                                          self.y, self.x, self.n, xtx, xtxi, w, W), method='L-BFGS-B',
                                      tol=epsilon)
                self.rho = res.x[0]
                self.lam = res.x[1]

            # NOT IMPLEMENTED
            # elif methodML == 'LU':
            #     I = sp.identity(w.n)
            #     Wsp = w.sparse  # moved here
            #     W = Wsp
            #     res = minimize(lag_c_loglik_sp, x0, bounds=((-1.0, 1.0),(None, None)),
            #                           args=(self.n, e0, e1, I, Wsp),
            #                           method='L-BFGS-B', tol=epsilon)
            # elif methodML == 'ORD':
            #     # check on symmetry structure
            #     if w.asymmetry(intrinsic=False) == []:
            #         ww = symmetrize(w)
            #         WW = np.array(ww.todense())
            #         evals = la.eigvalsh(WW)
            #         W = WW
            #     else:
            #         W = w.full()[0]     # moved here
            #         evals = la.eigvals(W)
            #     res = minimize(lag_c_loglik_ord, x0, bounds=((-1.0, 1.0),(None, None)),
            #                           args=(
            #                               self.n, e0, e1, evals), method='L-BFGS-B',
            #                           tol=epsilon)
        else:
            # program will crash, need to catch
            print(("{0} is an unsupported method".format(methodML)))
            self = None
            return

        # compute full log-likelihood, including constants
        ln2pi = np.log(2.0 * np.pi)
        llik = -res.fun - self.n / 2.0 * ln2pi - self.n / 2.0
        self.logll = llik[0][0]

        # b, residuals and predicted values


        b, e0, e1, ylam, self.ybc = self.get_beta_err(self.lam, w)

        self.betas = np.vstack((b, self.rho, self.lam))   # rho and lambda added as last coefficients
        self.u = e0 - self.rho * e1
        # Currently calculated using BC transformed values
        self.predy = self.ybc - self.u

        # predicted y in Box-Cox units
        self.predy_e, self.predy_e_lam, self.predy_e_bc = self.get_pred_y(w, b, self.rho, self.lam, epsilon)

        yty = self.predy_e_lam.T * self.predy_e_lam

        # residual variance
        self._cache = {}
        self.sig2 = self.sig2n  # no allowance for division by n-k

        # Calculate the information matrix
        self.vm1 = self.inf_mat(W, w, b, self.ybc, self.predy_e, self.predy_e_lam, self.predy_e_bc, self.rho, self.lam)  # vm1 includes variance for sigma2
        self.vm = self.vm1[:-1, :-1]  # vm is for coefficients only
        # CHECK
        self.vm[-1, -1] = np.abs(self.vm[-1, -1])

        if LM:
            x01 = [0.0, 0.0]
            x02 = [0.0, 1.0]
            x03 = [0.0, res.x[1]]
            x04 = [res.x[0], 0.0]
            x05 = [res.x[0], 1.0]
            res1 = minimize(lag_c_loglik, x01, bounds=((0.0, 0.0), (0.0, 0.0)),
                           args=(
                               self.y, self.x, self.n, xtx, xtxi, w, W), method='L-BFGS-B',
                           tol=epsilon)
            # Get the betas
            bb1, e0, e1, ylam1, ybc1 = self.get_beta_err(res1.x[1], w)
            # Get the predicted y values
            pred_y1, pred_ylam1, pred_ybc1 = self.get_pred_y(w, bb1, res1.x[0], res1.x[1], epsilon)
            # Get the gradient vector for LM test 1
            gv1 = self.grad_vect(W, bb1, ybc1, pred_y1, pred_ylam1, pred_ybc1, res1.x[0], res1.x[1], 1)
            # Get the information matrix for LM test 1
            vm1 = self.inf_mat(W, w, bb1, ybc1, pred_y1, pred_ylam1, pred_ybc1, res1.x[0], res1.x[1], 1)  # vm1 includes variance for sigma2

            res2 = minimize(lag_c_loglik, x02, bounds=((0.0, 0.0), (1.0, 1.0)),
                           args=(
                               self.y, self.x, self.n, xtx, xtxi, w, W), method='L-BFGS-B',
                           tol=epsilon)
            # Get the betas
            bb2, e0, e1, ylam2, ybc2 = self.get_beta_err(res2.x[1], w)
            # Get the predicted y values
            pred_y2, pred_ylam2, pred_ybc2 = self.get_pred_y(w, bb2, res2.x[0], res2.x[1], epsilon)
            # Get the gradient vector for LM test 2
            gv2 = self.grad_vect(W, bb2, ybc2, pred_y2, pred_ylam2, pred_ybc2, res2.x[0], res2.x[1], 2)
            # Get the information matrix for LM test 2
            vm2 = self.inf_mat(W, w, bb2, ybc2, pred_y2, pred_ylam2, pred_ybc2, res2.x[0], res2.x[1], 2)  # vm1 includes variance for sigma2

            res3 = minimize(lag_c_loglik, x03, bounds=((0.0, 0.0), (None, None)),
                           args=(
                               self.y, self.x, self.n, xtx, xtxi, w, W), method='L-BFGS-B',
                           tol=epsilon)
            # Get the betas
            bb3, e0, e1, ylam3, ybc3 = self.get_beta_err(res3.x[1], w)
            # Get the predicted y values
            pred_y3, pred_ylam3, pred_ybc3 = self.get_pred_y(w, bb3, res3.x[0], res3.x[1], epsilon)
            # Get the gradient vector for LM test 3
            gv3 = self.grad_vect(W, bb3, ybc3, pred_y3, pred_ylam3, pred_ybc3, res3.x[0], res3.x[1], 3)
            # Get the information matrix for LM test 3
            vm3 = self.inf_mat(W, w, bb3, ybc3, pred_y3, pred_ylam3, pred_ybc3, res3.x[0], res3.x[1], 3)  # vm1 includes variance for sigma2

            res4 = minimize(lag_c_loglik, x04, bounds=((-1.0, 1.0), (0.0, 0.0)),
                           args=(
                               self.y, self.x, self.n, xtx, xtxi, w, W), method='L-BFGS-B',
                           tol=epsilon)
            # Get the betas
            bb4, e0, e1, ylam4, ybc4 = self.get_beta_err(res4.x[1], w)
            # Get the predicted y values
            pred_y4, pred_ylam4, pred_ybc4 = self.get_pred_y(w, bb4, res4.x[0], res4.x[1], epsilon)
            # Get the gradient vector for LM test 4
            gv4 = self.grad_vect(W, bb4, ybc4, pred_y4, pred_ylam4, pred_ybc4, res4.x[0], res4.x[1], 4)
            # Get the information matrix for LM test 4
            vm4 = self.inf_mat(W, w, bb4, ybc4, pred_y4, pred_ylam4, pred_ybc4, res4.x[0], res4.x[1], 4)  # vm1 includes variance for sigma2

            res5 = minimize(lag_c_loglik, x05, bounds=((-1.0, 1.0), (1.0, 1.0)),
                           args=(
                               self.y, self.x, self.n, xtx, xtxi, w, W), method='L-BFGS-B',
                           tol=epsilon)
            # Get the betas
            bb5, e0, e1, ylam5, ybc5 = self.get_beta_err(res5.x[1], w)
            # Get the predicted y values
            pred_y5, pred_ylam5, pred_ybc5 = self.get_pred_y(w, bb5, res5.x[0], res5.x[1], epsilon)
            # Get the gradient vector for LM test 5
            gv5 = self.grad_vect(W, bb5, ybc5, pred_y5, pred_ylam5, pred_ybc5, res5.x[0], res5.x[1], 5)
            # Get the information matrix for LM test 5
            vm5 = self.inf_mat(W, w, bb5, ybc5, pred_y5, pred_ylam5, pred_ybc5, res5.x[0], res5.x[1], 5) # vm1 includes variance for sigma2

            gtvm1 = spdot(gv1.T, vm1)
            gtvm2 = spdot(gv2.T, vm2)
            gtvm3 = spdot(gv3.T, vm3)
            gtvm4 = spdot(gv4.T, vm4)
            gtvm5 = spdot(gv5.T, vm5)

            self.LM_J_R0_L0 = spdot(gtvm1, gv1)
            self.LM_J_R0_L1 = spdot(gtvm2, gv2)
            self.LM_C_R0_LU = spdot(gtvm3, gv3)
            self.LM_C_RU_L0 = spdot(gtvm4, gv4)
            self.LM_C_RU_L1 = spdot(gtvm5, gv5)

    def get_beta_err(self, lam, w):
        ylam = self.y**lam
        if lam == 0:
            ybc = np.log(self.y)
        else:
            ybc = (self.y**lam - 1) / lam

        ylag = ps.lag_spatial(w, ybc)
        # b0, b1, e0 and e1
        xtx = spdot(self.x.T, self.x)
        xtxi = la.inv(xtx)
        xty = spdot(self.x.T, ybc)
        xtyl = spdot(self.x.T, ylag)
        b0 = np.dot(xtxi, xty)
        b1 = np.dot(xtxi, xtyl)
        b = b0 - self.rho * b1
        e0 = ybc - spdot(self.x, b0)
        e1 = ylag - spdot(self.x, b1)
        return b, e0, e1, ylam, ybc

    def get_pred_y(self, w, b, rho, lam, epsilon):
        xb = spdot(self.x, b)
        ybc = inverse_prod(
            w.sparse, xb, rho, inv_method="power_exp", threshold=epsilon)
        ybc[ybc < 0] = 0.0001
        # convert Box-Cox y into standard y with lambda applied
        if lam == 0:
            ylam = np.exp(ybc)
            ylam[ylam < 0] = 0.0001
            # convert standard y with lambda into standard y values
            y = ylam
        else:
            ylam = ybc * lam + 1
            ylam[ylam < 0] = 0.0001
            # convert standard y with lambda into standard y values
            y = ylam ** (1 / lam)

        # Distances must be greater than 0 (and values in general for the logarithm to be taken)
        # CODE DOES NOT WORK FOR NON POSITIVE DEPENDENT VARIABLES
        y[y<0] = 0.0001

        return y, ylam, ybc

    def grad_vect(self, W, b, ybc, pred_y, pred_ylam, pred_ybc, rho, lam, case=0):
        # gradient vector
        xb = spdot(self.x, b)
        y = self.y

        a = -rho * W
        spfill_diagonal(a, 1.0)
        ai = spinv(a)
        wai = spdot(W, ai)
        tr1 = wai.diagonal().sum()  # same for sparse and dense

        lny = np.log(y)
        # Build components of lambda var/covar
        # d2F/dlam2
        if lam == 0:
            # c(y, 0)
            c = lny**2 / 2
        elif lam == 1:
            # c(y, 1)
            c = pred_y * lny - pred_y + 1
        else:
            c = (lny * lam * pred_ylam - pred_ylam + 1) / (lam ** 2)
        ac = spdot(a, c)
        e = spdot(a, ybc) - xb
        wy = spdot(W, pred_ybc)

        # Define 1st order derivatives
        if case == 5:
            dFdb = spdot(self.x.T, e) / self.sig2
            dFdr = -1 * tr1 + spdot(e.T, wy) / self.sig2
            dFds = -1 * self.n / (2.0 * self.sig2)
            # order of variables is beta, rho, sigma2
            return np.vstack((dFdb, dFdr, dFds))
        else:
            dFdb = spdot(self.x.T, e) / self.sig2
            dFdr = -1 * tr1 + spdot(e.T, wy) / self.sig2
            dFdl = np.sum(lny) - spdot(e.T, ac) / self.sig2
            dFds = -1 * self.n / (2.0 * self.sig2)
            # order of variables is beta, rho, lambda, sigma2
            return np.vstack((dFdb, dFdr, dFdl, dFds))

    def inf_mat(self, W, w, b, ybc, pred_y, pred_ylam, pred_ybc, rho, lam, case=0):
        # information matrix
        xb = spdot(self.x, b)
        y = self.y

        xtx = spdot(self.x.T, self.x)
        a = -rho * W
        spfill_diagonal(a, 1.0)
        ai = spinv(a)
        wai = spdot(W, ai)
        tr1 = wai.diagonal().sum()  # same for sparse and dense

        wai2 = np.dot(wai, wai)
        tr2 = wai2.diagonal().sum()

        waiTwai = np.dot(wai.T, wai)
        tr3 = waiTwai.diagonal().sum()
        ### to here

        wpredy = ps.lag_spatial(w, pred_ybc)
        wpyTwpy = np.dot(wpredy.T, wpredy)
        xTwpy = spdot(self.x.T, wpredy)

        # define the fixed values used in the calculation of var/covar for lambda
        # fixed wrt lambda
        wtw = spdot(W.T, W)
        wx = spdot(W, self.x)
        wxb = spdot(wx, b)

        lny = np.log(pred_y)
        # Build components of lambda var/covar
        # d2F/dlam2
        if lam == 0:
            # c(y, 0)
            c = lny**2 / 2
            dcdl = lny**3 / 3
        elif lam == 1:
            # c(y, 1)
            c = pred_y * lny - pred_y + 1
            dcdl = pred_y * lny**2 - 2 * pred_y * lny + 2 * lny - 2
        else:
            c = (lny * lam * pred_ylam - pred_ylam + 1) / (lam ** 2)
            dcdl = (lam ** 2 * lny ** 2 * pred_ylam + 2 * pred_ylam - 2 * lam * lny * pred_ylam - 2) \
                   / (lam ** 3)

        ac = spdot(a, c)
        adc = spdot(a, dcdl)
        xa = spdot(self.x.T, a)
        xac = spdot(xa, c)
        e = spdot(a, ybc) - xb
        wc = spdot(W, c)
        wly = spdot(W, lny)
        wy = spdot(pred_ybc.T, W.T)
        p2 = y * lny**2 - 2 * pred_y * lny + 2 * pred_y - 2

        # Define 2nd order derivatives
        dFdlb = -1 * xac / self.sig2
        if rho == 0 and lam == 1:
            dFdll = spdot((pred_y * lny - pred_y + 1).T, (pred_y * lny - pred_y + 1)) / self.sig2 \
                    + spdot(e.T, p2) / self.sig2
        else:
            dFdll = (spdot(ac.T, ac) + spdot(e.T, adc)) / self.sig2
        dFdlr = -1 * (spdot(wy, ac) + spdot(e.T, wc)) / self.sig2
        dFdls = -1 * spdot(e.T, ac) / self.sig2 ** 2

        if case == 5:
        # order of variables is beta, rho, sigma2
            v1 = np.vstack((xtx / self.sig2, xTwpy.T / self.sig2, np.zeros((1, self.k))))
            v2 = np.vstack((xTwpy / self.sig2, tr2 + tr3 + wpyTwpy / self.sig2, tr1 / self.sig2))
            v3 = np.vstack((np.zeros((self.k, 1)), tr1 / self.sig2, self.n / (2.0 * self.sig2 ** 2)))
            v = np.hstack((v1, v2, v3))
        else:
            # order of variables is beta, rho, lambda, sigma2
            v1 = np.vstack((xtx / self.sig2, xTwpy.T / self.sig2, dFdlb.T, np.zeros((1, self.k))))
            v2 = np.vstack((xTwpy / self.sig2, tr2 + tr3 + wpyTwpy / self.sig2, dFdlr, tr1 / self.sig2))
            v3 = np.vstack((dFdlb, dFdlr, dFdll, dFdls))
            v4 = np.vstack((np.zeros((self.k, 1)), tr1 / self.sig2, dFdls, self.n / (2.0 * self.sig2 ** 2)))
            v = np.hstack((v1, v2, v3, v4))

        return la.inv(v)

class ML_Lag_BC(BaseML_Lag_BC):

    """
    ML estimation of the spatial lag model with Box-Cox transformation of dependent variable
    with all results and diagnostics; Anselin (1988) [Anselin1988]

    Parameters
    ----------
    y            : array
                   nx1 array for dependent variable
    x            : array
                   Two dimensional array with n rows and one column for each
                   independent (exogenous) variable, excluding the constant
    w            : pysal W object
                   Spatial weights object
    method       : string
                   if 'full', brute force calculation (full matrix expressions)
                   if 'ord', Ord eigenvalue method
    epsilon      : float
                   tolerance criterion in mimimize_scalar function and inverse_product
    spat_diag    : boolean
                   if True, include spatial diagnostics
    vm           : boolean
                   if True, include variance-covariance matrix in summary
                   results
    name_y       : string
                   Name of dependent variable for use in output
    name_x       : list of strings
                   Names of independent variables for use in output
    name_w       : string
                   Name of weights matrix for use in output
    name_ds      : string
                   Name of dataset for use in output

    Attributes
    ----------
    betas        : array
                   (k+1)x1 array of estimated coefficients (rho first)
    rho          : float
                   estimate of spatial autoregressive coefficient
    lam          : float
                   estimate of Box-Cox transformation coefficient on dependent variable
    u            : array
                   nx1 array of residuals
    predy        : array
                   nx1 array of predicted y values
    n            : integer
                   Number of observations
    k            : integer
                   Number of variables for which coefficients are estimated
                   (including the constant, excluding the rho)
    y            : array
                   nx1 array for dependent variable
    x            : array
                   Two dimensional array with n rows and one column for each
                   independent (exogenous) variable, including the constant
    method       : string
                   log Jacobian method
                   if 'full': brute force (full matrix computations)
    epsilon      : float
                   tolerance criterion used in minimize_scalar function and inverse_product
    mean_y       : float
                   Mean of dependent variable
    std_y        : float
                   Standard deviation of dependent variable
    vm           : array
                   Variance covariance matrix (k+1 x k+1), all coefficients
    vm1          : array
                   Variance covariance matrix (k+2 x k+2), includes sig2
    sig2         : float
                   Sigma squared used in computations
    logll        : float
                   maximized log-likelihood (including constant terms)
    aic          : float
                   Akaike information criterion
    schwarz      : float
                   Schwarz criterion
    LM_J_R0_L0    : float
                   Lagrange multiplier criterion for joint condition
                   of no spatial lag and log distance transformation
    LM_J_R0_L1    : float
                   Lagrange multiplier criterion for joint condition
                   of no spatial lag and linear distance transformation
    LM_C_R0_LU    : float
                   Lagrange multiplier criterion for conditional condition
                   of no spatial lag and unknown distance transformation
    LM_C_RU_L0    : float
                   Lagrange multiplier criterion for conditional condition
                   of unkown spatial lag and log distance transformation
    LM_C_RU_L1    : float
                   Lagrange multiplier criterion for conditional condition
                   of unkown spatial lag and linear distance transformation
    predy_e      : array
                   predicted values from reduced form
    e_pred       : array
                   prediction errors using reduced form predicted values
    pr2          : float
                   Pseudo R squared (squared correlation between y and ypred)
    pr2_e        : float
                   Pseudo R squared (squared correlation between y and ypred_e
                   (using reduced form))
    utu          : float
                   Sum of squared residuals
    std_err      : array
                   1xk array of standard errors of the betas
    z_stat       : list of tuples
                   z statistic; each tuple contains the pair (statistic,
                   p-value), where each is a float
    name_y       : string
                   Name of dependent variable for use in output
    name_x       : list of strings
                   Names of independent variables for use in output
    name_w       : string
                   Name of weights matrix for use in output
    name_ds      : string
                   Name of dataset for use in output
    title        : string
                   Name of the regression method used

    """

    def __init__(self, y, x, w, method='full', epsilon=0.0000001,
                 spat_diag=False, vm=False, name_y=None, name_x=None,
                 name_w=None, name_ds=None, LM=False):
        n = USER.check_arrays(y, x)
        USER.check_y(y, n)
        USER.check_weights(w, y, w_required=True)
        x_constant = USER.check_constant(x)
        method = method.upper()
        BaseML_Lag_BC.__init__(
            self, y=y, x=x_constant, w=w, method=method, epsilon=epsilon, LM=LM)
        # increase by 1 to have correct aic and sc, include rho and lambda in count
        self.k += 2
        self.title = "MAXIMUM LIKELIHOOD SPATIAL LAG WITH BOX-COX" + \
            " (METHOD = " + method + ")"
        self.name_ds = USER.set_name_ds(name_ds)
        self.name_y = USER.set_name_y(name_y)
        self.name_x = USER.set_name_x(name_x, x)
        name_ylag = USER.set_name_yend_sp(self.name_y)
        name_ybc = "LAMBDA"
        self.name_x.append(name_ylag)  # rho changed to last position
        self.name_x.append(name_ybc)
        self.name_w = USER.set_name_w(name_w, w)
        self.aic = DIAG.akaike(reg=self)
        self.schwarz = DIAG.schwarz(reg=self)
        SUMMARY.ML_Lag_BC(reg=self, w=w, vm=vm, spat_diag=spat_diag, LM=LM)

def lag_c_loglik(beta, y, x, n, xtx, xtxi, wps, W):
    # concentrated log-lik for lag model, no constants, brute force
    rho = beta[0]
    lam = beta[1]

    if beta[1] == 0:
        ybc = np.log(y)
    else:
        ybc = (y**lam - 1) / lam
    ylag = ps.lag_spatial(wps, ybc)
    xty = spdot(x.T, ybc)
    xtyl = spdot(x.T, ylag)
    b0 = np.dot(xtxi, xty)
    b1 = np.dot(xtxi, xtyl)
    e0 = ybc - spdot(x, b0)
    e1 = ylag - spdot(x, b1)
    er = e0 - rho * e1
    sig2 = np.dot(er.T, er) / n
    nlsig2 = (n / 2.0) * np.log(sig2)
    a = -rho * W
    spfill_diagonal(a, 1.0)
    jacob = np.log(np.linalg.det(a)) + (lam - 1) * np.sum(np.log(y))
    # this is the negative of the concentrated log lik for minimization
    clik = nlsig2 - jacob
    return clik

# NOT IMPLEMENTED
# def lag_c_loglik_sp(beta, n, e0, e1, I, Wsp):
#     # concentrated log-lik for lag model, sparse algebra
#     if isinstance(rho, np.ndarray):
#         if beta[0].shape == (1,1):
#             beta[0] = beta[0][0] #why does the interior value change?
#     er = e0 - beta[0] * e1
#     sig2 = np.dot(er.T, er) / n
#     nlsig2 = (n / 2.0) * np.log(sig2)
#     a = I - beta[0] * Wsp
#     LU = SuperLU(a.tocsc())
#     jacob = np.sum(np.log(np.abs(LU.U.diagonal())))
#     clike = nlsig2 - jacob
#     return clike
#
# def lag_c_loglik_ord(beta, n, e0, e1, evals):
#     # concentrated log-lik for lag model, no constants, Ord eigenvalue method
#     er = e0 - beta[0] * e1
#     sig2 = np.dot(er.T, er) / n
#     nlsig2 = (n / 2.0) * np.log(sig2)
#     revals = beta[0] * evals
#     jacob = np.log(1 - revals).sum()
#     if isinstance(jacob, complex):
#         jacob = jacob.real
#     # this is the negative of the concentrated log lik for minimization
#     clik = nlsig2 - jacob
#     return clik

def _test():
    import doctest
    start_suppress = np.get_printoptions()['suppress']
    np.set_printoptions(suppress=True)
    doctest.testmod()
    np.set_printoptions(suppress=start_suppress)

